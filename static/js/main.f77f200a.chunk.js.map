{"version":3,"sources":["components/Header.js","components/Footer.js","components/SearchForm.js","components/DisplayArea.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Footer","SearchForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","event","preventDefault","getSearchResults","state","searchInput","handleChange","setState","target","value","query","axios","get","params","imgonly","ps","q","key","process","results","art","data","artObjects","updateArt","updateCurrentSearch","console","log","_context","t0","message","_this2","onSubmit","htmlFor","type","id","name","placeholder","onChange","Component","DisplayArea","className","length","currentSearch","map","item","title","webImage","artist","principalOrFirstMaker","src","url","alt","App","components_Header","components_SearchForm","components_DisplayArea","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f77f200a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n\treturn (\n\t\t<header>\n\t\t\t<h1>Rijks Museum Database</h1>\n\t\t</header>\n\t);\n}\n\nexport default Header;","import React from 'react';\n\nfunction Footer() {\n\treturn (\n\t\t<footer><p>&copy;2019 HackerYou</p></footer>\n\t);\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst APIKEY = process.env.REACT_APP_API_KEY; // Your API Key goes here, we should put this in .env\n\n// Searchform is in charge of the actual call to the API, \n// It should have a controlled input for searching (what are the 3 things we need to make a controlled input?)\n// It will recieve 2 function props, one to pass the current search term to App\n// And one to pass the current search results to the App\n\n// This component should have the structure:\n// <form>\n// \t<label></label>\n//\t<input type=\"search\"/>\n// </form>\n\nclass SearchForm extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsearchInput: ''\n\t\t};\n\t}\n\n\tasync getSearchResults(query) {\n\t\ttry {\n\t\t\t// Make an Ajax call with Axios here\n\t\t\tconst results = await axios.get('https://www.rijksmuseum.nl/api/en/collection/', {\n\t\t\t\tparams: {\n\t\t\t\t\timgonly: true,\n\t\t\t\t\tps: 20,\n\t\t\t\t\tq: query,\n\t\t\t\t\tkey: APIKEY\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst art = results.data.artObjects;\n\t\t\tthis.props.updateArt(art);\n\t\t\tthis.props.updateCurrentSearch(this.state.searchInput);\n\t\t\t// Reset our search form\n\t\t} catch (error) {\n\t\t\tconsole.log(error.message);\n\t\t}\n\t}\n\n\thandleSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tthis.getSearchResults(this.state.searchInput);\n\t}\n\n\thandleChange = (event) => {\n\t\tthis.setState({\n\t\t\tsearchInput: event.target.value\n\t\t});\n\n\t}\n\n\trender() {\n\n\t\tconst {searchInput} = this.state;\n\t\treturn (\n\t\t\t<form onSubmit={ (event) => this.handleSubmit(event)}>\n\t\t\t\t<label htmlFor='search'>Find some art:</label>\n\t\t\t\t<input \n\t\t\t\t\ttype=\"search\" \n\t\t\t\t\tid='search' \n\t\t\t\t\tname='search' \n\t\t\t\t\tplaceholder='Enter a keyword'\n\t\t\t\t\tvalue={searchInput}\n\t\t\t\t\tonChange={(event) => this.handleChange(event)}\n\t\t\t\t/>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default SearchForm;","import React from 'react';\n\n// If there is nothing to display: \n// <div className=\"noResults\">\n// \t<p>Please enter a search term.</p>\n// </div>\n\n// If there are results to display:\n//<div className=\"showResults\">\n//\t<p>Showing results for:</p>\n//\t<div className=\"artworks\">\n//\t... results go here\n//\t</div>\n//</div>\n\n// Each piece of art should have structure:\n// <div className=\"art\">\n// \t<img src=\"\" alt=\"\"/>\n// \t<h2>Title</h2>\n// \t<h3>Artist</h3>\n// </div>\n\nfunction DisplayArea(props) {\n\t\treturn (\n\t\t\t<div className=\"displayArea\" >\n\t\t\t\t{\n\t\t\t\t\tprops.art.length > 0 ? (\n\t\t\t\t\t\t<div className='showResults'>\n\t\t\t\t\t\t\t<p>Showing results for: {props.currentSearch}</p>\n\t\t\t\t\t\t\t<div className='artworks'>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprops.art.map(item => {\n\t\t\t\t\t\t\t\t\t\tconst {id, title, webImage, principalOrFirstMaker: artist} = item;\n\t\t\t\t\t\t\t\t\t\treturn (\t\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"art\" key={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t<img src={webImage.url} alt=\"\"/>\n\t\t\t\t\t\t\t\t\t\t\t\t<h2>{title}</h2>\n\t\t\t\t\t\t\t\t\t\t\t\t<h3>{artist}</h3>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div className='noResults'>\n\t\t\t\t\t\t\t<p>Enter a search term</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n}\n\nexport default DisplayArea;","import React, { Component } from 'react';\nimport './App.scss';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport SearchForm from './components/SearchForm';\nimport DisplayArea from './components/DisplayArea';\n\n// Our app should have state for the current search term and results, so it can pass these things to the display area\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state  = {\n      currentSearch: '',\n      art: []\n    };\n  }\n\n  updateCurrentSearch = (currentSearch) => {\n    this.setState({\n      currentSearch\n    })\n  }\n\n  updateArt = (art) => {\n    this.setState({\n      art\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <main>\n          <SearchForm\n            updateCurrentSearch={this.updateCurrentSearch}\n            updateArt={this.updateArt}\n          />\n          <DisplayArea\n            art={this.state.art}\n            currentSearch={this.state.currentSearch}\n          />\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}